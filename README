具有多种使用规范的redis
==============
redis-limited以redis-2.8为基础，主要是增加了一些使用约束。redis本身作为一个基于内存的存储引擎，约束条件较少，如果没有超过最大使用内存，
集合、列表的大小可以无限大。但是平时我们多将redis作为网络（api）接口的缓存，在这种情况下，应该对redis进行更多的约束，比如如果在set中存储过
多的数据，可能会导致smembers命令消耗大量io，影响redis的服务。redis-limit具备以下几个约束：
设置redis-limit约束功能是否开启
------------------
在配置文件和通过config set 命令中，可以设置limited约束功能是否开启的·总开关·。如果此配置为0，表示各种约束功能关闭。
语法： config set limited yes 开启； config set limited no 关闭(默认)。

设置set、setx、setnx等命令所设置的value最大长度
------------------
通过此配置，可以设置某一个key-value中value的最大长度，避免超大value使用
语法：config set set_value_max_length 0 无限制(默认)； config set set_value_max_length xxx 最大value xxx个字节。

设置队列的最大长度
------------------
语法：config set list_max_length 0 无限制(默认)； config set list_max_length xxx 最大xxx个元素。

设置集合的最大个数
------------------
语法：config set set_max_length 0 无限制(默认)； config set set_max_length xxx 最大xxx个元素。

设置有序集合的最大长度
------------------
语法：config set zset_max_length 0 无限制(默认)； config set zset_max_length xxx 最大xxx个元素。


设置限流功能
==============
redis-limit同时具有输出限流功能。由于redis的单进程单线程结构，对于某些命令，比如smembers，如果返回数据过大的话，一次返回所有数据可能会导致
其他需要处理的命令等待较长的时间。redis-limit可以设置某些命令·一次·输出的字节数，防止某些命令一直得不得处理。
设置限流功能是否开启
语法： config set transport_limited 0 关闭（默认）； config set transport_limited xx 一次传送xx个字节，剩余的数据在下次epoll_wait后继续处理。

设置需要限流功能的命令
------------------
上面的transport_limited仅设置限流是否开启，开启后还需要设置对于哪些命令进行限流（主要是一些返回数据较大的命令）
语法：config set transport_limited_cmds "smembers zrange" 设置smembers、zrange命令需要限流；默认没有命令需要限流。


安装方式：
========================================
跟redis一样：configure 、 make 、make  install

性能测试：
（1）首先redis中有两个key：mylist是一个list，里面有10000条数据；testk是字符串，值为testv。
（2）单独测试get命令：redis-benchmark -n 10000 get testk。结果如下：
            ====== get testk ======
       10000 requests completed in 0.11 seconds
       50 parallel clients
       3 bytes payload
       keep alive: 1

       100.00% <= 0 milliseconds
       94339.62 requests per second
（3）在一个客户端一直执行lrang mylist 0 -1 的情况下，再次测试get命令性能：redis-benchmark -c 1 -r 10000 lrange mylist 0 -1（另一个命令行运行），redis-benchmark -n 10000 get testk（另一个命令行运行），结果如下：
          ====== get testk ======
      10000 requests completed in 0.42 seconds
      50 parallel clients
      3 bytes payload
      keep alive: 1

     4.39% <= 1 milliseconds
     54.33% <= 2 milliseconds
     100.00% <= 3 milliseconds
     23980.82 requests per second
可见在lrang 命令下，其他命令的吞吐率会下降。
（3）运行config set transport_limited 10000 和 config set transport_limited_cmds lrange命令。然后重复2中的测试，结果如下：
       ====== get testk ======
     10000 requests completed in 0.19 seconds
     50 parallel clients
     3 bytes payload
     keep alive: 1
 
    83.46% <= 1 milliseconds
    98.61% <= 2 milliseconds
    100.00% <= 2 milliseconds
    51282.05 requests per second
可见，通过对某一命令（lrange）进行限速，可以减小它对其他命令的影响。更改transport_limited的值，可以看到不同的结果（redis默认一次epoll循环发送64kb数据，通过本命令，可以自定义不同命令不同的发送大小）。

transport_limited=1000时的结果：
====== get testk ======
  10000 requests completed in 0.12 seconds
  50 parallel clients
  3 bytes payload
  keep alive: 1

97.22% <= 1 milliseconds
99.05% <= 2 milliseconds
100.00% <= 2 milliseconds
83333.34 requests per second


transport_limited=100时的结果：


====== get testk ======
  10000 requests completed in 0.11 seconds
  50 parallel clients
  3 bytes payload
  keep alive: 1

98.87% <= 1 milliseconds
99.76% <= 2 milliseconds
100.00% <= 2 milliseconds
90090.09 requests per second




